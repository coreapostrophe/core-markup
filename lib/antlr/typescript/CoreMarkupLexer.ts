// Generated from ./src/antlr/CoreMarkupLexer.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CoreMarkupLexer extends Lexer {
	public static readonly OPTION_TAG = 1;
	public static readonly HEADER_TAG = 2;
	public static readonly QUESTION_DETAIL_TAG = 3;
	public static readonly QUESTION_TAG = 4;
	public static readonly DETAIL_TAG = 5;
	public static readonly NEWLINE = 6;
	public static readonly TEXT = 7;
	public static readonly KEY = 8;
	public static readonly VALUE = 9;
	public static readonly WS = 10;
	public static readonly CONTENT = 1;
	public static readonly OPTION = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "CONTENT", "OPTION",
	];

	public static readonly ruleNames: string[] = [
		"SYM_HEADER", "SYM_QUESTION", "SYM_ENUM_QUESTION", "SYM_DETAIL", "SYM_OPTION", 
		"OPTION_TAG", "HEADER_TAG", "QUESTION_DETAIL_TAG", "QUESTION_TAG", "DETAIL_TAG", 
		"NEWLINE", "TEXT", "KEY", "VALUE", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "OPTION_TAG", "HEADER_TAG", "QUESTION_DETAIL_TAG", "QUESTION_TAG", 
		"DETAIL_TAG", "NEWLINE", "TEXT", "KEY", "VALUE", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CoreMarkupLexer._LITERAL_NAMES, CoreMarkupLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CoreMarkupLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CoreMarkupLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "CoreMarkupLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return CoreMarkupLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CoreMarkupLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CoreMarkupLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CoreMarkupLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\fz\b\x01\b\x01" +
		"\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06" +
		"\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f" +
		"\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x03\x02\x03\x02\x03" +
		"\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\b\x06\b3\n\b\r\b\x0E\b4\x03\b\x03\b\x03\t\x06" +
		"\t:\n\t\r\t\x0E\t;\x03\t\x03\t\x05\t@\n\t\x03\t\x03\t\x03\n\x03\n\x05" +
		"\nF\n\n\x03\n\x03\n\x03\v\x06\vK\n\v\r\v\x0E\vL\x03\v\x03\v\x03\f\x05" +
		"\fR\n\f\x03\f\x03\f\x05\fV\n\f\x03\f\x03\f\x03\r\x06\r[\n\r\r\r\x0E\r" +
		"\\\x03\r\x03\r\x03\x0E\x06\x0Eb\n\x0E\r\x0E\x0E\x0Ec\x03\x0F\x03\x0F\x03" +
		"\x0F\x03\x0F\x03\x0F\x07\x0Fk\n\x0F\f\x0F\x0E\x0Fn\v\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x10\x06\x10u\n\x10\r\x10\x0E\x10v\x03\x10\x03\x10" +
		"\x02\x02\x02\x11\x05\x02\x02\x07\x02\x02\t\x02\x02\v\x02\x02\r\x02\x02" +
		"\x0F\x02\x03\x11\x02\x04\x13\x02\x05\x15\x02\x06\x17\x02\x07\x19\x02\b" +
		"\x1B\x02\t\x1D\x02\n\x1F\x02\v!\x02\f\x05\x02\x03\x04\x06\x04\x02\f\f" +
		"\x0F\x0F\x04\x02C\\c|\x05\x02\f\f\x0F\x0F$$\x04\x02\v\v\"\"\x02~\x02\x0F" +
		"\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15" +
		"\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x03\x1B" +
		"\x03\x02\x02\x02\x04\x1D\x03\x02\x02\x02\x04\x1F\x03\x02\x02\x02\x04!" +
		"\x03\x02\x02\x02\x05#\x03\x02\x02\x02\x07%\x03\x02\x02\x02\t\'\x03\x02" +
		"\x02\x02\v)\x03\x02\x02\x02\r+\x03\x02\x02\x02\x0F-\x03\x02\x02\x02\x11" +
		"2\x03\x02\x02\x02\x139\x03\x02\x02\x02\x15E\x03\x02\x02\x02\x17J\x03\x02" +
		"\x02\x02\x19U\x03\x02\x02\x02\x1BZ\x03\x02\x02\x02\x1Da\x03\x02\x02\x02" +
		"\x1Fe\x03\x02\x02\x02!t\x03\x02\x02\x02#$\x07%\x02\x02$\x06\x03\x02\x02" +
		"\x02%&\x07,\x02\x02&\b\x03\x02\x02\x02\'(\x07&\x02\x02(\n\x03\x02\x02" +
		"\x02)*\x07/\x02\x02*\f\x03\x02\x02\x02+,\x07=\x02\x02,\x0E\x03\x02\x02" +
		"\x02-.\x05\r\x06\x02./\x03\x02\x02\x02/0\b\x07\x02\x020\x10\x03\x02\x02" +
		"\x0213\x05\x05\x02\x0221\x03\x02\x02\x0234\x03\x02\x02\x0242\x03\x02\x02" +
		"\x0245\x03\x02\x02\x0256\x03\x02\x02\x0267\b\b\x03\x027\x12\x03\x02\x02" +
		"\x028:\x05\v\x05\x0298\x03\x02\x02\x02:;\x03\x02\x02\x02;9\x03\x02\x02" +
		"\x02;<\x03\x02\x02\x02<?\x03\x02\x02\x02=@\x05\x07\x03\x02>@\x05\t\x04" +
		"\x02?=\x03\x02\x02\x02?>\x03\x02\x02\x02@A\x03\x02\x02\x02AB\b\t\x03\x02" +
		"B\x14\x03\x02\x02\x02CF\x05\x07\x03\x02DF\x05\t\x04\x02EC\x03\x02\x02" +
		"\x02ED\x03\x02\x02\x02FG\x03\x02\x02\x02GH\b\n\x03\x02H\x16\x03\x02\x02" +
		"\x02IK\x05\v\x05\x02JI\x03\x02\x02\x02KL\x03\x02\x02\x02LJ\x03\x02\x02" +
		"\x02LM\x03\x02\x02\x02MN\x03\x02\x02\x02NO\b\v\x03\x02O\x18\x03\x02\x02" +
		"\x02PR\x07\x0F\x02\x02QP\x03\x02\x02\x02QR\x03\x02\x02\x02RS\x03\x02\x02" +
		"\x02SV\x07\f\x02\x02TV\x07\x0F\x02\x02UQ\x03\x02\x02\x02UT\x03\x02\x02" +
		"\x02VW\x03\x02\x02\x02WX\b\f\x04\x02X\x1A\x03\x02\x02\x02Y[\n\x02\x02" +
		"\x02ZY\x03\x02\x02\x02[\\\x03\x02\x02\x02\\Z\x03\x02\x02\x02\\]\x03\x02" +
		"\x02\x02]^\x03\x02\x02\x02^_\b\r\x05\x02_\x1C\x03\x02\x02\x02`b\t\x03" +
		"\x02\x02a`\x03\x02\x02\x02bc\x03\x02\x02\x02ca\x03\x02\x02\x02cd\x03\x02" +
		"\x02\x02d\x1E\x03\x02\x02\x02el\x07$\x02\x02fg\x07^\x02\x02gh\x07^\x02" +
		"\x02hk\x07$\x02\x02ik\n\x04\x02\x02jf\x03\x02\x02\x02ji\x03\x02\x02\x02" +
		"kn\x03\x02\x02\x02lj\x03\x02\x02\x02lm\x03\x02\x02\x02mo\x03\x02\x02\x02" +
		"nl\x03\x02\x02\x02op\x07$\x02\x02pq\x03\x02\x02\x02qr\b\x0F\x05\x02r " +
		"\x03\x02\x02\x02su\t\x05\x02\x02ts\x03\x02\x02\x02uv\x03\x02\x02\x02v" +
		"t\x03\x02\x02\x02vw\x03\x02\x02\x02wx\x03\x02\x02\x02xy\b\x10\x04\x02" +
		"y\"\x03\x02\x02\x02\x11\x02\x03\x044;?ELQU\\cjlv\x06\x07\x04\x02\x07\x03" +
		"\x02\b\x02\x02\x06\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CoreMarkupLexer.__ATN) {
			CoreMarkupLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CoreMarkupLexer._serializedATN));
		}

		return CoreMarkupLexer.__ATN;
	}

}

